/**
 * Untitled
 * Fast Healthcare Interoperability Resources (FHIR, pronounced \"Fire\") defines a set of \"Resources\" that represent granular clinical concepts. The resources can be managed in isolation, or aggregated into complex documents. Technically, FHIR is designed for the web; the resources are based on simple XML or JSON structures, with an http-based RESTful protocol where each resource has predictable URL. Where possible, open internet standards are used for data representation.
 *
 * OpenAPI spec version: unspecified
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Patient } from '../model/patient';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PatientService {

    protected basePath = 'http://localhost:3000/4_0_0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     *
     * @param active
     * @param address
     * @param addressCity
     * @param addressCountry
     * @param addressPostalcode
     * @param addressState
     * @param addressUse
     * @param birthdate
     * @param deathDate
     * @param deceased
     * @param email
     * @param family
     * @param gender
     * @param generalPractitioner
     * @param given
     * @param identifier
     * @param language
     * @param link
     * @param name
     * @param organization
     * @param phone
     * @param phonetic
     * @param telecom
     * @param content
     * @param id
     * @param lastUpdated
     * @param profile
     * @param query
     * @param security
     * @param source
     * @param tag
     * @param text
     * @param format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patientGet(active?: string, address?: string, addressCity?: string, addressCountry?: string, addressPostalcode?: string, addressState?: string, addressUse?: string, birthdate?: string, deathDate?: string, deceased?: string, email?: string, family?: string, gender?: string, generalPractitioner?: string, given?: string, identifier?: string, language?: string, link?: string, name?: string, organization?: string, phone?: string, phonetic?: string, telecom?: string, content?: string, id?: string, lastUpdated?: string, profile?: string, query?: string, security?: string, source?: string, tag?: string, text?: string, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Patient>>;
    public patientGet(active?: string, address?: string, addressCity?: string, addressCountry?: string, addressPostalcode?: string, addressState?: string, addressUse?: string, birthdate?: string, deathDate?: string, deceased?: string, email?: string, family?: string, gender?: string, generalPractitioner?: string, given?: string, identifier?: string, language?: string, link?: string, name?: string, organization?: string, phone?: string, phonetic?: string, telecom?: string, content?: string, id?: string, lastUpdated?: string, profile?: string, query?: string, security?: string, source?: string, tag?: string, text?: string, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Patient>>>;
    public patientGet(active?: string, address?: string, addressCity?: string, addressCountry?: string, addressPostalcode?: string, addressState?: string, addressUse?: string, birthdate?: string, deathDate?: string, deceased?: string, email?: string, family?: string, gender?: string, generalPractitioner?: string, given?: string, identifier?: string, language?: string, link?: string, name?: string, organization?: string, phone?: string, phonetic?: string, telecom?: string, content?: string, id?: string, lastUpdated?: string, profile?: string, query?: string, security?: string, source?: string, tag?: string, text?: string, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Patient>>>;
    public patientGet(active?: string, address?: string, addressCity?: string, addressCountry?: string, addressPostalcode?: string, addressState?: string, addressUse?: string, birthdate?: string, deathDate?: string, deceased?: string, email?: string, family?: string, gender?: string, generalPractitioner?: string, given?: string, identifier?: string, language?: string, link?: string, name?: string, organization?: string, phone?: string, phonetic?: string, telecom?: string, content?: string, id?: string, lastUpdated?: string, profile?: string, query?: string, security?: string, source?: string, tag?: string, text?: string, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (active !== undefined && active !== null) {
            queryParameters = queryParameters.set('active', <any>active);
        }
        if (address !== undefined && address !== null) {
            queryParameters = queryParameters.set('address', <any>address);
        }
        if (addressCity !== undefined && addressCity !== null) {
            queryParameters = queryParameters.set('address-city', <any>addressCity);
        }
        if (addressCountry !== undefined && addressCountry !== null) {
            queryParameters = queryParameters.set('address-country', <any>addressCountry);
        }
        if (addressPostalcode !== undefined && addressPostalcode !== null) {
            queryParameters = queryParameters.set('address-postalcode', <any>addressPostalcode);
        }
        if (addressState !== undefined && addressState !== null) {
            queryParameters = queryParameters.set('address-state', <any>addressState);
        }
        if (addressUse !== undefined && addressUse !== null) {
            queryParameters = queryParameters.set('address-use', <any>addressUse);
        }
        if (birthdate !== undefined && birthdate !== null) {
            queryParameters = queryParameters.set('birthdate', <any>birthdate);
        }
        if (deathDate !== undefined && deathDate !== null) {
            queryParameters = queryParameters.set('death-date', <any>deathDate);
        }
        if (deceased !== undefined && deceased !== null) {
            queryParameters = queryParameters.set('deceased', <any>deceased);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (family !== undefined && family !== null) {
            queryParameters = queryParameters.set('family', <any>family);
        }
        if (gender !== undefined && gender !== null) {
            queryParameters = queryParameters.set('gender', <any>gender);
        }
        if (generalPractitioner !== undefined && generalPractitioner !== null) {
            queryParameters = queryParameters.set('general-practitioner', <any>generalPractitioner);
        }
        if (given !== undefined && given !== null) {
            queryParameters = queryParameters.set('given', <any>given);
        }
        if (identifier !== undefined && identifier !== null) {
            queryParameters = queryParameters.set('identifier', <any>identifier);
        }
        if (language !== undefined && language !== null) {
            queryParameters = queryParameters.set('language', <any>language);
        }
        if (link !== undefined && link !== null) {
            queryParameters = queryParameters.set('link', <any>link);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (organization !== undefined && organization !== null) {
            queryParameters = queryParameters.set('organization', <any>organization);
        }
        if (phone !== undefined && phone !== null) {
            queryParameters = queryParameters.set('phone', <any>phone);
        }
        if (phonetic !== undefined && phonetic !== null) {
            queryParameters = queryParameters.set('phonetic', <any>phonetic);
        }
        if (telecom !== undefined && telecom !== null) {
            queryParameters = queryParameters.set('telecom', <any>telecom);
        }
        if (content !== undefined && content !== null) {
            queryParameters = queryParameters.set('_content', <any>content);
        }
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('_id', <any>id);
        }
        if (lastUpdated !== undefined && lastUpdated !== null) {
            queryParameters = queryParameters.set('_lastUpdated', <any>lastUpdated);
        }
        if (profile !== undefined && profile !== null) {
            queryParameters = queryParameters.set('_profile', <any>profile);
        }
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('_query', <any>query);
        }
        if (security !== undefined && security !== null) {
            queryParameters = queryParameters.set('_security', <any>security);
        }
        if (source !== undefined && source !== null) {
            queryParameters = queryParameters.set('_source', <any>source);
        }
        if (tag !== undefined && tag !== null) {
            queryParameters = queryParameters.set('_tag', <any>tag);
        }
        if (text !== undefined && text !== null) {
            queryParameters = queryParameters.set('_text', <any>text);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('_format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Patient>>(`${this.basePath}/Patient`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param count
     * @param since
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patientHistoryGet(count?: string, since?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public patientHistoryGet(count?: string, since?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public patientHistoryGet(count?: string, since?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public patientHistoryGet(count?: string, since?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('_count', <any>count);
        }
        if (since !== undefined && since !== null) {
            queryParameters = queryParameters.set('_since', <any>since);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Patient/_history`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patientIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public patientIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public patientIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public patientIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patientIdDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/Patient/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patientIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<Patient>;
    public patientIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Patient>>;
    public patientIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Patient>>;
    public patientIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patientIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Patient>(`${this.basePath}/Patient/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param count
     * @param since
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patientIdHistoryGet(id: string, count?: string, since?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public patientIdHistoryGet(id: string, count?: string, since?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public patientIdHistoryGet(id: string, count?: string, since?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public patientIdHistoryGet(id: string, count?: string, since?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patientIdHistoryGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('_count', <any>count);
        }
        if (since !== undefined && since !== null) {
            queryParameters = queryParameters.set('_since', <any>since);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Patient/${encodeURIComponent(String(id))}/_history`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param vid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patientIdHistoryVidGet(id: string, vid: string, observe?: 'body', reportProgress?: boolean): Observable<Patient>;
    public patientIdHistoryVidGet(id: string, vid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Patient>>;
    public patientIdHistoryVidGet(id: string, vid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Patient>>;
    public patientIdHistoryVidGet(id: string, vid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patientIdHistoryVidGet.');
        }

        if (vid === null || vid === undefined) {
            throw new Error('Required parameter vid was null or undefined when calling patientIdHistoryVidGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Patient>(`${this.basePath}/Patient/${encodeURIComponent(String(id))}/_history/${encodeURIComponent(String(vid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patientIdPut(id: string, body?: Patient, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public patientIdPut(id: string, body?: Patient, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public patientIdPut(id: string, body?: Patient, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public patientIdPut(id: string, body?: Patient, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patientIdPut.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/Patient/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patientPost(body?: Patient, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public patientPost(body?: Patient, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public patientPost(body?: Patient, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public patientPost(body?: Patient, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/Patient`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
